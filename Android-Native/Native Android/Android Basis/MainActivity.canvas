{
	"nodes":[
		{"id":"b2e1ef1852df2b26","x":-420,"y":-220,"width":1220,"height":480,"type":"text","text":"package com.example.myapplication\nimport android.os.Bundle //class used to pass data between Android components (like saving state in `onCreate()`).\nimport androidx.activity.ComponentActivity //- the base class for activities in Jetpack Compose. It allows Compose UI code to be used inside an activity.\nimport com.example.myapplication.ui.theme.MyApplicationTheme //- It defines colors, shapes, typography used throughout the app.\n\n```kotlin\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n \n        setContent {\n            MyApplicationTheme {\n \n\n                }\n            }\n        }\n    }\n\n```\n\n"},
		{"id":"c5ba859204c2fda7","x":990,"y":-320,"width":610,"height":100,"type":"text","text":"`override fun onCreate()` is the entry point when the activity is launched.\n- whenever our MainActivity  reated execute inside of     override fun onCreate(savedInstanceState: Bundle?) { { }"},
		{"id":"094b474835a947bd","x":999,"y":-157,"width":601,"height":77,"type":"text","text":"- `super.onCreate(...)` ensures the parent class's setup code is run.\n- whatever the default behavior  for on create  of given activity is   please run that first then do setContent -> MyApplicationTheme -> "},
		{"id":"998e248b071ecb10","x":996,"y":17,"width":604,"height":63,"type":"text","text":"`setContent {}` is where you define your **UI in Compose**."},
		{"id":"8257223d964ba7ab","x":-420,"y":334,"width":1220,"height":1026,"type":"text","text":"What is activity?\n### 📱 Simple Definition:\n\n> An **Activity** is a single, focused thing that a user can do.  \n> Each screen in an app is usually represented by one Activity.\n\n---\n\n### 🔍 Real-life Example:\n\nImagine an app like WhatsApp:\n\n- The chat list screen → one Activity\n    \n- A chat window with a friend → another Activity\n    \n- Settings screen → another Activity\n    \n\nSo, switching screens in an app often means switching between activities.\n\n---\n\n### 🧠 Technically:\n\n- Activity is a **class** in Android: `android.app.Activity`\n    \n- You usually create your own activity by **extending** it:\n    \n    kotlin\n    \n    CopyEdit\n    \n    `class MainActivity : AppCompatActivity() { }`\n    \n- Activities have **lifecycle methods** (like `onCreate`, `onStart`, `onResume`) that control what happens as the screen opens, is visible, or closes.\n    \n\n---\n\n### 🛠 What it does:\n\n- Sets the **UI layout** of the screen\n    \n- Responds to **user actions**\n    \n- Can **start other activities** (e.g., go to the next screen)\n    \n- Manages **permissions**, **results**, and **state** of that screen\n    \n\n---\n\n### ✅ Summary:\n\n- **Activity = One screen in your app**\n    \n- Handles **UI**, **user interaction**, and **navigation**\n    \n- It's the **entry point** for most user-facing parts of an Android app"},
		{"id":"222e98957ba5e12f","x":-420,"y":1480,"width":1220,"height":1240,"type":"text","text":"### What is composable?\n- it basically jut a element that something we can see on screen \n- it either contain other composable  that are  then actually visible or it is the thing that we can see itself\n\n\nIn **Jetpack Compose** (Android's modern UI toolkit), a **Composable** is:\n\n> A **function** that describes **a part of the UI**.  \n> It tells the system **what to show on the screen**.\n\n---\n\n### 🔤 In simple terms:\n\n> A **composable is a building block of UI** in Jetpack Compose.  \n> It can be something simple like a **Text**, or something complex that contains **other composables**.\n\n---\n\n### 🧩 Examples:\n\n```kotlin\n@Composable\nfun Greeting(name: String) {\n    Text(\"Hello, $name!\")\n}\n```\n\n- `Text` is a built-in composable.\n    \n- `Greeting` is a custom composable you wrote.\n    \n\n---\n\n### 📦 Composables can:\n\n- **Display** something (like a button, image, text)\n    \n- **Contain** other composables (like a layout with multiple elements)\n    \n- Be **reused** and **nested** (just like functions)\n    \n\n---\n\n### 🔁 Lifecycle-aware:\n\nComposables are **recomposed** automatically when the **state** they use changes — that’s how the UI stays updated!\n\n---\n\n### ✅ Your idea, rephrased:\n\n> A composable is a function that defines **UI elements**, either **directly visible items** like a button or text, or **containers** that organize and hold other composables.\n\nWould you like to see how composables are used in layouts like `Column`, `Row`, or `Box`?"}
	],
	"edges":[
		{"id":"3cd001067bfa0dfd","fromNode":"b2e1ef1852df2b26","fromSide":"right","toNode":"c5ba859204c2fda7","toSide":"left"},
		{"id":"6e9f8f7aaa6ff584","fromNode":"b2e1ef1852df2b26","fromSide":"right","toNode":"094b474835a947bd","toSide":"left"},
		{"id":"95850809e03de739","fromNode":"b2e1ef1852df2b26","fromSide":"right","toNode":"998e248b071ecb10","toSide":"left"}
	]
}